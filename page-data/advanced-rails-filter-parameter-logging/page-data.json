{"componentChunkName":"component---src-templates-blog-post-js","path":"/advanced-rails-filter-parameter-logging/","webpackCompilationHash":"4e96ebfb30551aba2216","result":{"data":{"site":{"siteMetadata":{"title":"Awful, Slow and Expensive","author":"Chris Morris"}},"markdownRemark":{"id":"7081d6d1-00c3-53ba-beb3-fd33ba73c973","excerpt":"Rails in a powerful framework, providing great magical features with little to no configuration. For instance, if you were to turn your logging level to…","html":"<p>Rails in a powerful framework, providing great <em>magical</em> features with little to no configuration. For instance, if you were to turn your logging level to <code class=\"language-text\">info</code>, magically you can now not only see the requested URL for your controllers, but the parameters that were provided as well! Think about that last sentence again. All of your parameters will be logged … in plain text to your logging provider. Suddenly this helpful configuration change has added a potential security attack vector to your application. Your logs will now contain any secrets being passed to your controllers. Thankfully rails has a not so straightforward configuration option we’ll walk through together below: <code class=\"language-text\">config.filter_parameters</code></p>\n<h2>Setting up the config</h2>\n<p>The bare minimum configuration for filtering certain parameters from your logs is to set up an array of keys that should not be included in your logs. It will replace the value of the key with <code class=\"language-text\">[FILTERED]</code>. Let’s look at what Rails provides us in terms of documentation:</p>\n<blockquote>\n<p><code class=\"language-text\">config.filter_parameters</code> used for filtering out the parameters that you don’t want shown in the logs, such as passwords or credit card numbers. It also filters out sensitive values of database columns when call #inspect on an Active Record object. By default, Rails filters out passwords by adding Rails.application.config.filter<em>parameters += [:password] in config/initializers/filter</em>parameter_logging.rb. Parameters filter works by partial matching regular expression.</p>\n</blockquote>\n<p>This seems easy enough! By appending the keys you wish to be filtered from your parameters in a new <code class=\"language-text\">initializers</code> file, we can rest assured our logs don’t contain any exposed secrets … granted the parameters can be parsed. </p>\n<h2>Filter non-parsable params</h2>\n<p>Sometimes Rails has a hard time parsing a set of parameters to the correct format. Have you even setup a new webhook handler route, to discover the payload is of content <code class=\"language-text\">multipart/form-data</code>, but a form field is a stringified JSON? Sometimes external payloads aren;t configured properly, but still need to be parsed all the same. Thankfully <code class=\"language-text\">config.filter_parameters</code> supports <code class=\"language-text\">lambda</code> functions as a value in the Array! Setting up a lambda to do some extra parsing for us, we can filter out additional parameters as if they were parsed correctly the first time. We will set this up with two files, one to hold the lambda, and the existing <code class=\"language-text\">initializers</code> file to apply the configuration.</p>\n<h3>app/helpers/filter_helper.rb</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># frozen_string_literal: true\n\nmodule FilterHelper\n  # Configure sensitive parameters which will be filtered from the log file.\n  ALWAYS_FILTERED_PARAMS = [\n    :encrypted_token,\n    :password,\n    :code,\n    :response_url,\n    :token,\n    :trigger_id,\n    :sharedSecret,\n    :installation_id,\n    :state_hash,\n    :SAMLResponse\n  ]\n\n  # Define the parameter keys which need to be parsed from a JSON string\n  JSON_FILTER_PARAMS = [&#39;payload&#39;]\n\n  # Filter by a particular param key whose value is a JSON encoded string\n  # based on our standard set of filtering parameters.\n  FILTER_STRING_TO_JSON = lambda do |key, value|\n    if JSON_FILTER_PARAMS.include?(key.to_s) &amp;&amp; value.is_a?(String)\n      json = JSON.parse(value)\n      filtered = param_filter.filter(json)\n      value.replace(filtered.to_json)\n    end\n  rescue JSON::ParserError\n    Rails.logger.info(&quot;Parameter #{key} did not contain a JSON parsable value&quot;)\n  end\n\n  def self.param_filter\n    ActionDispatch::Http::ParameterFilter.new(ALWAYS_FILTERED_PARAMS)\n  end\nend</code></pre></div>\n<p>In the above file we setup a few constants, <code class=\"language-text\">ALWAYS_FILTERED_PARAMS</code> to keep track of the parameters we wish to filter out (including sensitive parameters in our JSON string), <code class=\"language-text\">JSON_FILTER_PARAMS</code> to keep track of parameter keys which contain stringified JSON to parse, and <code class=\"language-text\">FILTER_STRING_TO_JSON</code> as our lambda to filter our values. Lastly we have <code class=\"language-text\">self.param_filter</code> which allows us to call <code class=\"language-text\">filter</code> on our parsed values, doing the necessary substitutions.</p>\n<p><strong>Bonus</strong>: Since we moved our lambda into a helper module, it can be unit tested in isolation to our configuration changes!</p>\n<h3>config/initializers/filter_parameter_logging.rb</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># frozen_string_literal: true\n\nRails.application.config.filter_parameters += FilterHelper::ALWAYS_FILTERED_PARAMS\nRails.application.config.filter_parameters &lt;&lt; FilterHelper::FILTER_STRING_TO_JSON</code></pre></div>\n<p>Once we have our helper setup we can adjust how we use <code class=\"language-text\">config.filter_parameters</code>. We start by applying the array of symbols and strings to be filtered. Next we append to the array our lambda, which will do the additional filtering for us After a restart of your server, you should begin to see those pesky parameters being filtered from your logs!</p>","frontmatter":{"title":"Advanced Filter Parameter Logging in Rails","date":"August 16, 2020","description":"How to filter pesky sensitive parameters out of your logs using filter_parameter_logging option."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/advanced-rails-filter-parameter-logging/","previous":{"fields":{"slug":"/from-propeller-to-jet-kafka-talk/"},"frontmatter":{"title":"From Propeller to Jet - Changing your engines mid flight"}},"next":null}}}